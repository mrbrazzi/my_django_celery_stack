"""
Django settings for my_app project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

from dotenv import load_dotenv

# Check if we are in testing mode
TESTING = sys.argv[1:2] == ['test']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# reading .env file
load_dotenv(dotenv_path=str(os.path.join(str(BASE_DIR), '.env')))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# Check if we are running in PRODUCTION
PRODUCTION = int(os.getenv('PRODUCTION'))

# SECURITY WARNING: don't run with debug turned on in production!
# Only enable DEBUG when not running in production
DEBUG = not bool(PRODUCTION)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# Application definition

INSTALLED_APPS = [
    # 'django_celery_results',
    'django_celery_beat',

    'celery_app',
]

MIDDLEWARE = [
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                # 'django.contrib.auth.context_processors.auth',
                # 'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.getenv('DB_NAME'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TZ', 'UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Logging
# https://docs.djangoproject.com/en/2.2/topics/logging/

LOGFILE_SIZE = 10 * 1024 * 1024  # 10MB
LOGFILE_COUNT = 10
LOG_LEVEL = os.getenv('LOG_LEVEL')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(os.path.join(str(BASE_DIR), 'logs', 'debug.log')),
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'simple',
        },
        'celery_file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': str(os.path.join(str(BASE_DIR), 'logs', 'celery.log')),
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', LOG_LEVEL),
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['celery_file'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}
if not os.path.exists(os.path.join(BASE_DIR, 'logs')):
    os.makedirs(os.path.join(BASE_DIR, 'logs'))

# Celery
CELERY_LOG_FILE = str(os.path.join(str(BASE_DIR), 'logs', 'celery.log'))
CELERY_BROKER_URL = 'amqp://%s:%s@%s:%s/' % (os.getenv('BROKER_USER'), os.getenv('BROKER_PASSWORD'),
                                             os.getenv('BROKER_HOST'), os.getenv('BROKER_PORT'))
BROKER_HEARTBEAT = '?heartbeat=30'
if not CELERY_BROKER_URL.endswith(BROKER_HEARTBEAT):
    CELERY_BROKER_URL += BROKER_HEARTBEAT

BROKER_POOL_LIMIT = 1
BROKER_CONNECTION_TIMEOUT = 10

# 7 days
CELERY_TASK_RESULT_EXPIRES = 7*24*3600
CELERY_RESULT_BACKEND = 'db+sqlite:///{database}.sqlite'.format(database=DATABASES.get('default').get('NAME'))
# CELERY_CACHE_BACKEND = 'django-cache'

CELERY_TASK_DEFAULT_QUEUE = os.getenv('CELERY_TASK_DEFAULT_QUEUE')
CELERY_TASK_DEFAULT_EXCHANGE = os.getenv('CELERY_TASK_DEFAULT_EXCHANGE')
CELERY_TASK_DEFAULT_ROUTING_KEY = os.getenv('CELERY_TASK_DEFAULT_ROUTING_KEY')
CELERY_TASK_STORE_ERRORS_EVEN_IF_IGNORED = True

# By default we will ignore result
# If you want to see results and try out tasks interactively, change it to False
# Or change this setting on tasks level
# CELERY_TASK_IGNORE_RESULT = int(env('CELERY_TASK_IGNORE_RESULT'))
# CELERY_TASK_RESULT_EXPIRES = int(env('CELERY_TASK_RESULT_EXPIRES'))
CELERY_SEND_TASK_ERROR_EMAILS = int(os.getenv('CELERY_SEND_TASK_ERROR_EMAILS'))

CELERYD_PREFETCH_MULTIPLIER = 1
CELERYD_MAX_TASKS_PER_CHILD = 1000
